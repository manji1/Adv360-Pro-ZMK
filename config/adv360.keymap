
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
        &kp EQUAL     &kp N1  &kp N2  &kp N3     &kp N4    &kp N5                           &tog 1             &mo 3          &kp N6     &kp N7     &kp N8           &kp N9  &kp N0      &kp MINUS
          &kp TAB      &kp Q   &kp W   &kp E      &kp R     &kp T                            &mo 4             &none           &kp Y      &kp U      &kp I            &kp O   &kp P       &kp BSLH
 &mt LCTRL ESCAPE      &kp A   &kp S   &kp D      &kp F     &kp G            &kp LC(LS(SEMICOLON))  &kp LEFT_COMMAND  &mt LALT LANG2                        &mt RCTRL LANG1   &mo 2  &kp LC(LS(J))     &kp H   &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
        &kp LSHFT      &kp Z   &kp X   &kp C      &kp V     &kp B                            &none             &none           &mo 4      &none      &none    &kp LC(LS(J))   &none          &none     &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
            &none  &kp GRAVE   &none   &none  &kp EQUAL  &kp BSPC                          &kp DEL             &mo 2           &mo 2  &kp ENTER  &kp SPACE        &kp MINUS   &none       &kp LBKT  &kp RBKT   &none
            >;
        };

        layer_keypad {
            bindings = <
 &kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4    &kp N5             &trans      &mo 3     &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY   &kp MINUS
   &kp TAB      &kp Q     &kp W     &kp E      &kp R     &kp T              &none      &none      &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS    &kp BSLH
   &kp ESC      &kp A     &kp S     &kp D      &kp F     &kp G              &none  &kp LCTRL   &kp LALT                                 &kp LGUI        &kp RCTRL       &none     &kp H  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp SQT
 &kp LSHFT      &kp Z     &kp X     &kp C      &kp V     &kp B              &none      &none   &kp HOME       &none         &none      &kp PG_UP            &none       &none     &kp N  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &kp RSHFT
     &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT  &kp BSPC            &kp DEL    &kp END  &kp PG_DN   &kp ENTER     &kp KP_N0         &kp UP         &kp DOWN  &kp KP_DOT  &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
 &kp F11         &kp F1     &kp F2     &kp F3         &kp F4             &kp F5                     &none   &none    &kp F6       &kp F7  &kp F8         &kp F9  &kp F10               &kp F12
  &trans      &kp LG(Q)  &kp LG(W)  &kp LG(E)      &kp LG(R)          &kp LG(T)                     &none   &none  &kp HOME  &kp PAGE_UP  &kp UP      &kp PG_DN  &kp END     &kp LG(BACKSLASH)
  &trans      &kp LG(A)  &kp LG(S)  &kp LG(D)      &kp LG(F)          &kp LG(G)                     &none  &trans    &trans                              &trans   &trans                 &none           &kp LG(LEFT)   &kp LEFT       &kp DOWN       &kp RIGHT  &kp LG(RIGHT)         &kp LG(APOS)
  &trans      &kp LG(Z)  &kp LG(X)  &kp LG(C)      &kp LG(V)          &kp LG(B)                     &none   &none    &trans        &none   &none         &trans    &none                 &none              &kp LG(N)  &kp LG(M)  &kp LG(COMMA)  &kp LG(PERIOD)  &kp LG(SLASH)  &kp LG(RIGHT_SHIFT)
  &trans  &kp LG(GRAVE)     &trans     &trans  &kp LG(EQUAL)  &kp LG(BACKSPACE)            &kp LG(DELETE)  &trans    &trans       &trans  &trans  &kp LG(MINUS)   &trans  &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)     &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4                             &none       &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none
  &none         &none         &none         &none         &none            &none                       &bootloader  &bootloader         &none         &none            &none         &none         &none                   &none
  &none         &none         &none         &none         &none            &none            &rgb_ug RGB_MEFS_CMD 5   &bt BT_CLR         &none                                   &bt BT_CLR    &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5   &none   &none   &none   &none   &none   &none
  &none         &none         &none         &none         &none            &none                             &none        &none         &none         &none            &none         &none         &none                   &none   &none   &none   &none   &none   &none   &none
  &none         &none         &none    &bl BL_INC    &bl BL_DEC  &rgb_ug RGB_TOG                        &bl BL_TOG        &none         &none    &bl BL_TOG  &rgb_ug RGB_TOG    &bl BL_INC    &bl BL_DEC                   &none   &none   &none
            >;
        };

        layer_Symbol {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                &trans          &trans           &trans                 &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                                                 &trans                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                &trans          &trans           &trans                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans                &trans          &trans           &trans                 &trans  &trans  &trans  &trans
            >;
        };

    };
};
